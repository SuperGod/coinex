// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Margin margin
// swagger:model Margin
type Margin struct {

	// account
	// Required: true
	Account *int64 `json:"account"`

	// action
	Action string `json:"action,omitempty"`

	// amount
	Amount int64 `json:"amount,omitempty"`

	// available margin
	AvailableMargin int64 `json:"availableMargin,omitempty"`

	// commission
	Commission float64 `json:"commission,omitempty"`

	// confirmed debit
	ConfirmedDebit int64 `json:"confirmedDebit,omitempty"`

	// currency
	// Required: true
	Currency *string `json:"currency"`

	// excess margin
	ExcessMargin int64 `json:"excessMargin,omitempty"`

	// excess margin pcnt
	ExcessMarginPcnt float64 `json:"excessMarginPcnt,omitempty"`

	// gross comm
	GrossComm int64 `json:"grossComm,omitempty"`

	// gross exec cost
	GrossExecCost int64 `json:"grossExecCost,omitempty"`

	// gross last value
	GrossLastValue int64 `json:"grossLastValue,omitempty"`

	// gross mark value
	GrossMarkValue int64 `json:"grossMarkValue,omitempty"`

	// gross open cost
	GrossOpenCost int64 `json:"grossOpenCost,omitempty"`

	// gross open premium
	GrossOpenPremium int64 `json:"grossOpenPremium,omitempty"`

	// indicative tax
	IndicativeTax int64 `json:"indicativeTax,omitempty"`

	// init margin
	InitMargin int64 `json:"initMargin,omitempty"`

	// maint margin
	MaintMargin int64 `json:"maintMargin,omitempty"`

	// margin balance
	MarginBalance int64 `json:"marginBalance,omitempty"`

	// margin balance pcnt
	MarginBalancePcnt float64 `json:"marginBalancePcnt,omitempty"`

	// margin leverage
	MarginLeverage float64 `json:"marginLeverage,omitempty"`

	// margin used pcnt
	MarginUsedPcnt float64 `json:"marginUsedPcnt,omitempty"`

	// pending credit
	PendingCredit int64 `json:"pendingCredit,omitempty"`

	// pending debit
	PendingDebit int64 `json:"pendingDebit,omitempty"`

	// prev realised pnl
	PrevRealisedPnl int64 `json:"prevRealisedPnl,omitempty"`

	// prev state
	PrevState string `json:"prevState,omitempty"`

	// prev unrealised pnl
	PrevUnrealisedPnl int64 `json:"prevUnrealisedPnl,omitempty"`

	// realised pnl
	RealisedPnl int64 `json:"realisedPnl,omitempty"`

	// risk limit
	RiskLimit int64 `json:"riskLimit,omitempty"`

	// risk value
	RiskValue int64 `json:"riskValue,omitempty"`

	// session margin
	SessionMargin int64 `json:"sessionMargin,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// synthetic margin
	SyntheticMargin int64 `json:"syntheticMargin,omitempty"`

	// target excess margin
	TargetExcessMargin int64 `json:"targetExcessMargin,omitempty"`

	// taxable margin
	TaxableMargin int64 `json:"taxableMargin,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`

	// unrealised pnl
	UnrealisedPnl int64 `json:"unrealisedPnl,omitempty"`

	// unrealised profit
	UnrealisedProfit int64 `json:"unrealisedProfit,omitempty"`

	// var margin
	VarMargin int64 `json:"varMargin,omitempty"`

	// wallet balance
	WalletBalance int64 `json:"walletBalance,omitempty"`

	// withdrawable margin
	WithdrawableMargin int64 `json:"withdrawableMargin,omitempty"`
}

// Validate validates this margin
func (m *Margin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Margin) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	return nil
}

func (m *Margin) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *Margin) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Margin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Margin) UnmarshalBinary(b []byte) error {
	var res Margin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
