// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TradeBin trade bin
// swagger:model TradeBin
type TradeBin struct {

	// close
	Close float64 `json:"close,omitempty"`

	// foreign notional
	ForeignNotional float64 `json:"foreignNotional,omitempty"`

	// high
	High float64 `json:"high,omitempty"`

	// home notional
	HomeNotional float64 `json:"homeNotional,omitempty"`

	// last size
	LastSize int64 `json:"lastSize,omitempty"`

	// low
	Low float64 `json:"low,omitempty"`

	// open
	Open float64 `json:"open,omitempty"`

	// symbol
	// Required: true
	Symbol *string `json:"symbol"`

	// timestamp
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp"`

	// trades
	Trades int64 `json:"trades,omitempty"`

	// turnover
	Turnover int64 `json:"turnover,omitempty"`

	// volume
	Volume int64 `json:"volume,omitempty"`

	// vwap
	Vwap float64 `json:"vwap,omitempty"`
}

// Validate validates this trade bin
func (m *TradeBin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSymbol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TradeBin) validateSymbol(formats strfmt.Registry) error {

	if err := validate.Required("symbol", "body", m.Symbol); err != nil {
		return err
	}

	return nil
}

func (m *TradeBin) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TradeBin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TradeBin) UnmarshalBinary(b []byte) error {
	var res TradeBin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
