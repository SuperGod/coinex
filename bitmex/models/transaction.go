// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Transaction transaction
// swagger:model Transaction
type Transaction struct {

	// account
	Account int64 `json:"account,omitempty"`

	// address
	Address string `json:"address,omitempty"`

	// amount
	Amount int64 `json:"amount,omitempty"`

	// currency
	Currency string `json:"currency,omitempty"`

	// fee
	Fee int64 `json:"fee,omitempty"`

	// text
	Text string `json:"text,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`

	// transact ID
	// Required: true
	TransactID *string `json:"transactID"`

	// transact status
	TransactStatus string `json:"transactStatus,omitempty"`

	// transact time
	// Format: date-time
	TransactTime strfmt.DateTime `json:"transactTime,omitempty"`

	// transact type
	TransactType string `json:"transactType,omitempty"`

	// tx
	Tx string `json:"tx,omitempty"`
}

// Validate validates this transaction
func (m *Transaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Transaction) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateTransactID(formats strfmt.Registry) error {

	if err := validate.Required("transactID", "body", m.TransactID); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateTransactTime(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactTime) { // not required
		return nil
	}

	if err := validate.FormatOf("transactTime", "body", "date-time", m.TransactTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Transaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Transaction) UnmarshalBinary(b []byte) error {
	var res Transaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
