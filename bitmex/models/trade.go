// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Trade Individual & Bucketed Trades
// swagger:model Trade
type Trade struct {

	// foreign notional
	ForeignNotional float64 `json:"foreignNotional,omitempty"`

	// gross value
	GrossValue int64 `json:"grossValue,omitempty"`

	// home notional
	HomeNotional float64 `json:"homeNotional,omitempty"`

	// price
	Price float64 `json:"price,omitempty"`

	// side
	Side string `json:"side,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// symbol
	// Required: true
	Symbol *string `json:"symbol"`

	// tick direction
	TickDirection string `json:"tickDirection,omitempty"`

	// timestamp
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp"`

	// trd match ID
	TrdMatchID string `json:"trdMatchID,omitempty"`
}

// Validate validates this trade
func (m *Trade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSymbol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Trade) validateSymbol(formats strfmt.Registry) error {

	if err := validate.Required("symbol", "body", m.Symbol); err != nil {
		return err
	}

	return nil
}

func (m *Trade) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Trade) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Trade) UnmarshalBinary(b []byte) error {
	var res Trade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
