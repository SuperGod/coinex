// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User Account Operations
// swagger:model User
type User struct {

	// t f a enabled
	TFAEnabled string `json:"TFAEnabled,omitempty"`

	// affiliate ID
	// Max Length: 6
	AffiliateID string `json:"affiliateID,omitempty"`

	// country
	// Max Length: 3
	Country string `json:"country,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// email
	// Required: true
	Email *string `json:"email"`

	// firstname
	Firstname string `json:"firstname,omitempty"`

	// geoip country
	// Max Length: 2
	GeoipCountry string `json:"geoipCountry,omitempty"`

	// geoip region
	// Max Length: 2
	GeoipRegion string `json:"geoipRegion,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// last updated
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"lastUpdated,omitempty"`

	// lastname
	Lastname string `json:"lastname,omitempty"`

	// owner Id
	OwnerID int32 `json:"ownerId,omitempty"`

	// pgp pub key
	// Max Length: 16384
	PgpPubKey string `json:"pgpPubKey,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`

	// preferences
	Preferences *UserPreferences `json:"preferences,omitempty"`

	// typ
	Typ string `json:"typ,omitempty"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffiliateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeoipCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeoipRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePgpPubKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateAffiliateID(formats strfmt.Registry) error {

	if swag.IsZero(m.AffiliateID) { // not required
		return nil
	}

	if err := validate.MaxLength("affiliateID", "body", string(m.AffiliateID), 6); err != nil {
		return err
	}

	return nil
}

func (m *User) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("country", "body", string(m.Country), 3); err != nil {
		return err
	}

	return nil
}

func (m *User) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *User) validateGeoipCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.GeoipCountry) { // not required
		return nil
	}

	if err := validate.MaxLength("geoipCountry", "body", string(m.GeoipCountry), 2); err != nil {
		return err
	}

	return nil
}

func (m *User) validateGeoipRegion(formats strfmt.Registry) error {

	if swag.IsZero(m.GeoipRegion) { // not required
		return nil
	}

	if err := validate.MaxLength("geoipRegion", "body", string(m.GeoipRegion), 2); err != nil {
		return err
	}

	return nil
}

func (m *User) validateLastUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validatePgpPubKey(formats strfmt.Registry) error {

	if swag.IsZero(m.PgpPubKey) { // not required
		return nil
	}

	if err := validate.MaxLength("pgpPubKey", "body", string(m.PgpPubKey), 16384); err != nil {
		return err
	}

	return nil
}

func (m *User) validatePreferences(formats strfmt.Registry) error {

	if swag.IsZero(m.Preferences) { // not required
		return nil
	}

	if m.Preferences != nil {
		if err := m.Preferences.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preferences")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
