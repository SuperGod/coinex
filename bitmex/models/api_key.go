// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIKey Persistent API Keys for Developers
// swagger:model APIKey
type APIKey struct {

	// cidr
	// Max Length: 18
	Cidr string `json:"cidr,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// enabled
	Enabled *bool `json:"enabled,omitempty"`

	// id
	// Required: true
	// Max Length: 24
	ID *string `json:"id"`

	// name
	// Required: true
	// Max Length: 64
	Name *string `json:"name"`

	// nonce
	// Required: true
	Nonce *int64 `json:"nonce"`

	// permissions
	Permissions []XAny `json:"permissions"`

	// secret
	// Required: true
	// Max Length: 48
	Secret *string `json:"secret"`

	// user Id
	// Required: true
	UserID *int32 `json:"userId"`
}

// Validate validates this API key
func (m *APIKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIKey) validateCidr(formats strfmt.Registry) error {

	if swag.IsZero(m.Cidr) { // not required
		return nil
	}

	if err := validate.MaxLength("cidr", "body", string(m.Cidr), 18); err != nil {
		return err
	}

	return nil
}

func (m *APIKey) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APIKey) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 24); err != nil {
		return err
	}

	return nil
}

func (m *APIKey) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 64); err != nil {
		return err
	}

	return nil
}

func (m *APIKey) validateNonce(formats strfmt.Registry) error {

	if err := validate.Required("nonce", "body", m.Nonce); err != nil {
		return err
	}

	return nil
}

func (m *APIKey) validateSecret(formats strfmt.Registry) error {

	if err := validate.Required("secret", "body", m.Secret); err != nil {
		return err
	}

	if err := validate.MaxLength("secret", "body", string(*m.Secret), 48); err != nil {
		return err
	}

	return nil
}

func (m *APIKey) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIKey) UnmarshalBinary(b []byte) error {
	var res APIKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
