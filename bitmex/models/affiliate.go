// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Affiliate affiliate
// swagger:model Affiliate
type Affiliate struct {

	// account
	// Required: true
	Account *int64 `json:"account"`

	// currency
	// Required: true
	Currency *string `json:"currency"`

	// exec comm
	ExecComm int64 `json:"execComm,omitempty"`

	// exec turnover
	ExecTurnover int64 `json:"execTurnover,omitempty"`

	// payout pcnt
	PayoutPcnt float64 `json:"payoutPcnt,omitempty"`

	// pending payout
	PendingPayout int64 `json:"pendingPayout,omitempty"`

	// prev comm
	PrevComm int64 `json:"prevComm,omitempty"`

	// prev payout
	PrevPayout int64 `json:"prevPayout,omitempty"`

	// prev timestamp
	// Format: date-time
	PrevTimestamp strfmt.DateTime `json:"prevTimestamp,omitempty"`

	// prev turnover
	PrevTurnover int64 `json:"prevTurnover,omitempty"`

	// referrer account
	ReferrerAccount float64 `json:"referrerAccount,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`

	// total comm
	TotalComm int64 `json:"totalComm,omitempty"`

	// total referrals
	TotalReferrals int64 `json:"totalReferrals,omitempty"`

	// total turnover
	TotalTurnover int64 `json:"totalTurnover,omitempty"`
}

// Validate validates this affiliate
func (m *Affiliate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrevTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Affiliate) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	return nil
}

func (m *Affiliate) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *Affiliate) validatePrevTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.PrevTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("prevTimestamp", "body", "date-time", m.PrevTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Affiliate) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Affiliate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Affiliate) UnmarshalBinary(b []byte) error {
	var res Affiliate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
