// Code generated by go-swagger; DO NOT EDIT.

package quote

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewQuoteGetBucketedParams creates a new QuoteGetBucketedParams object
// with the default values initialized.
func NewQuoteGetBucketedParams() *QuoteGetBucketedParams {
	var (
		binSizeDefault = string("1m")
		countDefault   = int32(100)
		partialDefault = bool(false)
		reverseDefault = bool(false)
		startDefault   = int32(0)
	)
	return &QuoteGetBucketedParams{
		BinSize: &binSizeDefault,
		Count:   &countDefault,
		Partial: &partialDefault,
		Reverse: &reverseDefault,
		Start:   &startDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewQuoteGetBucketedParamsWithTimeout creates a new QuoteGetBucketedParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewQuoteGetBucketedParamsWithTimeout(timeout time.Duration) *QuoteGetBucketedParams {
	var (
		binSizeDefault = string("1m")
		countDefault   = int32(100)
		partialDefault = bool(false)
		reverseDefault = bool(false)
		startDefault   = int32(0)
	)
	return &QuoteGetBucketedParams{
		BinSize: &binSizeDefault,
		Count:   &countDefault,
		Partial: &partialDefault,
		Reverse: &reverseDefault,
		Start:   &startDefault,

		timeout: timeout,
	}
}

// NewQuoteGetBucketedParamsWithContext creates a new QuoteGetBucketedParams object
// with the default values initialized, and the ability to set a context for a request
func NewQuoteGetBucketedParamsWithContext(ctx context.Context) *QuoteGetBucketedParams {
	var (
		binSizeDefault = string("1m")
		countDefault   = int32(100)
		partialDefault = bool(false)
		reverseDefault = bool(false)
		startDefault   = int32(0)
	)
	return &QuoteGetBucketedParams{
		BinSize: &binSizeDefault,
		Count:   &countDefault,
		Partial: &partialDefault,
		Reverse: &reverseDefault,
		Start:   &startDefault,

		Context: ctx,
	}
}

// NewQuoteGetBucketedParamsWithHTTPClient creates a new QuoteGetBucketedParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewQuoteGetBucketedParamsWithHTTPClient(client *http.Client) *QuoteGetBucketedParams {
	var (
		binSizeDefault = string("1m")
		countDefault   = int32(100)
		partialDefault = bool(false)
		reverseDefault = bool(false)
		startDefault   = int32(0)
	)
	return &QuoteGetBucketedParams{
		BinSize:    &binSizeDefault,
		Count:      &countDefault,
		Partial:    &partialDefault,
		Reverse:    &reverseDefault,
		Start:      &startDefault,
		HTTPClient: client,
	}
}

/*QuoteGetBucketedParams contains all the parameters to send to the API endpoint
for the quote get bucketed operation typically these are written to a http.Request
*/
type QuoteGetBucketedParams struct {

	/*BinSize
	  Time interval to bucket by. Available options: [1m,5m,1h,1d].

	*/
	BinSize *string
	/*Columns
	  Array of column names to fetch. If omitted, will return all columns.

	Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.

	*/
	Columns *string
	/*Count
	  Number of results to fetch.

	*/
	Count *int32
	/*EndTime
	  Ending date filter for results.

	*/
	EndTime *strfmt.DateTime
	/*Filter
	  Generic table filter. Send JSON key/value pairs, such as `{"key": "value"}`. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.

	*/
	Filter *string
	/*Partial
	  If true, will send in-progress (incomplete) bins for the current time period.

	*/
	Partial *bool
	/*Reverse
	  If true, will sort results newest first.

	*/
	Reverse *bool
	/*Start
	  Starting point for results.

	*/
	Start *int32
	/*StartTime
	  Starting date filter for results.

	*/
	StartTime *strfmt.DateTime
	/*Symbol
	  Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.

	You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`, `weekly`, `monthly`, `quarterly`, and `biquarterly`.

	*/
	Symbol *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the quote get bucketed params
func (o *QuoteGetBucketedParams) WithTimeout(timeout time.Duration) *QuoteGetBucketedParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the quote get bucketed params
func (o *QuoteGetBucketedParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the quote get bucketed params
func (o *QuoteGetBucketedParams) WithContext(ctx context.Context) *QuoteGetBucketedParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the quote get bucketed params
func (o *QuoteGetBucketedParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the quote get bucketed params
func (o *QuoteGetBucketedParams) WithHTTPClient(client *http.Client) *QuoteGetBucketedParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the quote get bucketed params
func (o *QuoteGetBucketedParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBinSize adds the binSize to the quote get bucketed params
func (o *QuoteGetBucketedParams) WithBinSize(binSize *string) *QuoteGetBucketedParams {
	o.SetBinSize(binSize)
	return o
}

// SetBinSize adds the binSize to the quote get bucketed params
func (o *QuoteGetBucketedParams) SetBinSize(binSize *string) {
	o.BinSize = binSize
}

// WithColumns adds the columns to the quote get bucketed params
func (o *QuoteGetBucketedParams) WithColumns(columns *string) *QuoteGetBucketedParams {
	o.SetColumns(columns)
	return o
}

// SetColumns adds the columns to the quote get bucketed params
func (o *QuoteGetBucketedParams) SetColumns(columns *string) {
	o.Columns = columns
}

// WithCount adds the count to the quote get bucketed params
func (o *QuoteGetBucketedParams) WithCount(count *int32) *QuoteGetBucketedParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the quote get bucketed params
func (o *QuoteGetBucketedParams) SetCount(count *int32) {
	o.Count = count
}

// WithEndTime adds the endTime to the quote get bucketed params
func (o *QuoteGetBucketedParams) WithEndTime(endTime *strfmt.DateTime) *QuoteGetBucketedParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the quote get bucketed params
func (o *QuoteGetBucketedParams) SetEndTime(endTime *strfmt.DateTime) {
	o.EndTime = endTime
}

// WithFilter adds the filter to the quote get bucketed params
func (o *QuoteGetBucketedParams) WithFilter(filter *string) *QuoteGetBucketedParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the quote get bucketed params
func (o *QuoteGetBucketedParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithPartial adds the partial to the quote get bucketed params
func (o *QuoteGetBucketedParams) WithPartial(partial *bool) *QuoteGetBucketedParams {
	o.SetPartial(partial)
	return o
}

// SetPartial adds the partial to the quote get bucketed params
func (o *QuoteGetBucketedParams) SetPartial(partial *bool) {
	o.Partial = partial
}

// WithReverse adds the reverse to the quote get bucketed params
func (o *QuoteGetBucketedParams) WithReverse(reverse *bool) *QuoteGetBucketedParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the quote get bucketed params
func (o *QuoteGetBucketedParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithStart adds the start to the quote get bucketed params
func (o *QuoteGetBucketedParams) WithStart(start *int32) *QuoteGetBucketedParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the quote get bucketed params
func (o *QuoteGetBucketedParams) SetStart(start *int32) {
	o.Start = start
}

// WithStartTime adds the startTime to the quote get bucketed params
func (o *QuoteGetBucketedParams) WithStartTime(startTime *strfmt.DateTime) *QuoteGetBucketedParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the quote get bucketed params
func (o *QuoteGetBucketedParams) SetStartTime(startTime *strfmt.DateTime) {
	o.StartTime = startTime
}

// WithSymbol adds the symbol to the quote get bucketed params
func (o *QuoteGetBucketedParams) WithSymbol(symbol *string) *QuoteGetBucketedParams {
	o.SetSymbol(symbol)
	return o
}

// SetSymbol adds the symbol to the quote get bucketed params
func (o *QuoteGetBucketedParams) SetSymbol(symbol *string) {
	o.Symbol = symbol
}

// WriteToRequest writes these params to a swagger request
func (o *QuoteGetBucketedParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BinSize != nil {

		// query param binSize
		var qrBinSize string
		if o.BinSize != nil {
			qrBinSize = *o.BinSize
		}
		qBinSize := qrBinSize
		if qBinSize != "" {
			if err := r.SetQueryParam("binSize", qBinSize); err != nil {
				return err
			}
		}

	}

	if o.Columns != nil {

		// query param columns
		var qrColumns string
		if o.Columns != nil {
			qrColumns = *o.Columns
		}
		qColumns := qrColumns
		if qColumns != "" {
			if err := r.SetQueryParam("columns", qColumns); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount int32
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.EndTime != nil {

		// query param endTime
		var qrEndTime strfmt.DateTime
		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime.String()
		if qEndTime != "" {
			if err := r.SetQueryParam("endTime", qEndTime); err != nil {
				return err
			}
		}

	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	if o.Partial != nil {

		// query param partial
		var qrPartial bool
		if o.Partial != nil {
			qrPartial = *o.Partial
		}
		qPartial := swag.FormatBool(qrPartial)
		if qPartial != "" {
			if err := r.SetQueryParam("partial", qPartial); err != nil {
				return err
			}
		}

	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool
		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {
			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}

	}

	if o.Start != nil {

		// query param start
		var qrStart int32
		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := swag.FormatInt32(qrStart)
		if qStart != "" {
			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}

	}

	if o.StartTime != nil {

		// query param startTime
		var qrStartTime strfmt.DateTime
		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime.String()
		if qStartTime != "" {
			if err := r.SetQueryParam("startTime", qStartTime); err != nil {
				return err
			}
		}

	}

	if o.Symbol != nil {

		// query param symbol
		var qrSymbol string
		if o.Symbol != nil {
			qrSymbol = *o.Symbol
		}
		qSymbol := qrSymbol
		if qSymbol != "" {
			if err := r.SetQueryParam("symbol", qSymbol); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
