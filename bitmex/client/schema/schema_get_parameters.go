// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSchemaGetParams creates a new SchemaGetParams object
// with the default values initialized.
func NewSchemaGetParams() *SchemaGetParams {
	var ()
	return &SchemaGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSchemaGetParamsWithTimeout creates a new SchemaGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSchemaGetParamsWithTimeout(timeout time.Duration) *SchemaGetParams {
	var ()
	return &SchemaGetParams{

		timeout: timeout,
	}
}

// NewSchemaGetParamsWithContext creates a new SchemaGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewSchemaGetParamsWithContext(ctx context.Context) *SchemaGetParams {
	var ()
	return &SchemaGetParams{

		Context: ctx,
	}
}

// NewSchemaGetParamsWithHTTPClient creates a new SchemaGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSchemaGetParamsWithHTTPClient(client *http.Client) *SchemaGetParams {
	var ()
	return &SchemaGetParams{
		HTTPClient: client,
	}
}

/*SchemaGetParams contains all the parameters to send to the API endpoint
for the schema get operation typically these are written to a http.Request
*/
type SchemaGetParams struct {

	/*Model
	  Optional model filter. If omitted, will return all models.

	*/
	Model *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the schema get params
func (o *SchemaGetParams) WithTimeout(timeout time.Duration) *SchemaGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the schema get params
func (o *SchemaGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the schema get params
func (o *SchemaGetParams) WithContext(ctx context.Context) *SchemaGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the schema get params
func (o *SchemaGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the schema get params
func (o *SchemaGetParams) WithHTTPClient(client *http.Client) *SchemaGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the schema get params
func (o *SchemaGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithModel adds the model to the schema get params
func (o *SchemaGetParams) WithModel(model *string) *SchemaGetParams {
	o.SetModel(model)
	return o
}

// SetModel adds the model to the schema get params
func (o *SchemaGetParams) SetModel(model *string) {
	o.Model = model
}

// WriteToRequest writes these params to a swagger request
func (o *SchemaGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Model != nil {

		// query param model
		var qrModel string
		if o.Model != nil {
			qrModel = *o.Model
		}
		qModel := qrModel
		if qModel != "" {
			if err := r.SetQueryParam("model", qModel); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
