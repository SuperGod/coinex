// Code generated by go-swagger; DO NOT EDIT.

package execution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new execution API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for execution API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ExecutionGet gets all raw executions for your account

This returns all raw transactions, which includes order opening and cancelation, and order status
changes. It can be quite noisy. More focused information is available at `/execution/tradeHistory`.

You may also use the `filter` param to target your query. Specify an array as a filter value, such as
`{"execType": ["Settlement", "Trade"]}` to filter on multiple values.

See [the FIX Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_8_8.html) for explanations of these fields.

*/
func (a *Client) ExecutionGet(params *ExecutionGetParams, authInfo runtime.ClientAuthInfoWriter) (*ExecutionGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutionGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Execution.get",
		Method:             "GET",
		PathPattern:        "/execution",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecutionGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExecutionGetOK), nil

}

/*
ExecutionGetTradeHistory gets all balance affecting executions this includes each trade insurance charge and settlement
*/
func (a *Client) ExecutionGetTradeHistory(params *ExecutionGetTradeHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*ExecutionGetTradeHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutionGetTradeHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Execution.getTradeHistory",
		Method:             "GET",
		PathPattern:        "/execution/tradeHistory",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecutionGetTradeHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExecutionGetTradeHistoryOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
