// Code generated by go-swagger; DO NOT EDIT.

package api_key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAPIKeyGetParams creates a new APIKeyGetParams object
// with the default values initialized.
func NewAPIKeyGetParams() *APIKeyGetParams {
	var (
		reverseDefault = bool(false)
	)
	return &APIKeyGetParams{
		Reverse: &reverseDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewAPIKeyGetParamsWithTimeout creates a new APIKeyGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAPIKeyGetParamsWithTimeout(timeout time.Duration) *APIKeyGetParams {
	var (
		reverseDefault = bool(false)
	)
	return &APIKeyGetParams{
		Reverse: &reverseDefault,

		timeout: timeout,
	}
}

// NewAPIKeyGetParamsWithContext creates a new APIKeyGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewAPIKeyGetParamsWithContext(ctx context.Context) *APIKeyGetParams {
	var (
		reverseDefault = bool(false)
	)
	return &APIKeyGetParams{
		Reverse: &reverseDefault,

		Context: ctx,
	}
}

// NewAPIKeyGetParamsWithHTTPClient creates a new APIKeyGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAPIKeyGetParamsWithHTTPClient(client *http.Client) *APIKeyGetParams {
	var (
		reverseDefault = bool(false)
	)
	return &APIKeyGetParams{
		Reverse:    &reverseDefault,
		HTTPClient: client,
	}
}

/*APIKeyGetParams contains all the parameters to send to the API endpoint
for the API key get operation typically these are written to a http.Request
*/
type APIKeyGetParams struct {

	/*Reverse
	  If true, will sort results newest first.

	*/
	Reverse *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the API key get params
func (o *APIKeyGetParams) WithTimeout(timeout time.Duration) *APIKeyGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the API key get params
func (o *APIKeyGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the API key get params
func (o *APIKeyGetParams) WithContext(ctx context.Context) *APIKeyGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the API key get params
func (o *APIKeyGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the API key get params
func (o *APIKeyGetParams) WithHTTPClient(client *http.Client) *APIKeyGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the API key get params
func (o *APIKeyGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithReverse adds the reverse to the API key get params
func (o *APIKeyGetParams) WithReverse(reverse *bool) *APIKeyGetParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the API key get params
func (o *APIKeyGetParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WriteToRequest writes these params to a swagger request
func (o *APIKeyGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool
		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {
			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
