// Code generated by go-swagger; DO NOT EDIT.

package api_key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAPIKeyNewParams creates a new APIKeyNewParams object
// with the default values initialized.
func NewAPIKeyNewParams() *APIKeyNewParams {
	var (
		enabledDefault = bool(false)
	)
	return &APIKeyNewParams{
		Enabled: &enabledDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewAPIKeyNewParamsWithTimeout creates a new APIKeyNewParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAPIKeyNewParamsWithTimeout(timeout time.Duration) *APIKeyNewParams {
	var (
		enabledDefault = bool(false)
	)
	return &APIKeyNewParams{
		Enabled: &enabledDefault,

		timeout: timeout,
	}
}

// NewAPIKeyNewParamsWithContext creates a new APIKeyNewParams object
// with the default values initialized, and the ability to set a context for a request
func NewAPIKeyNewParamsWithContext(ctx context.Context) *APIKeyNewParams {
	var (
		enabledDefault = bool(false)
	)
	return &APIKeyNewParams{
		Enabled: &enabledDefault,

		Context: ctx,
	}
}

// NewAPIKeyNewParamsWithHTTPClient creates a new APIKeyNewParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAPIKeyNewParamsWithHTTPClient(client *http.Client) *APIKeyNewParams {
	var (
		enabledDefault = bool(false)
	)
	return &APIKeyNewParams{
		Enabled:    &enabledDefault,
		HTTPClient: client,
	}
}

/*APIKeyNewParams contains all the parameters to send to the API endpoint
for the API key new operation typically these are written to a http.Request
*/
type APIKeyNewParams struct {

	/*Cidr
	  CIDR block to restrict this key to. To restrict to a single address, append "/32", e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. <a href="http://software77.net/cidr-101.html">More on CIDR blocks</a>

	*/
	Cidr *string
	/*Enabled
	  Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable.

	*/
	Enabled *bool
	/*Name
	  Key name. This name is for reference only.

	*/
	Name *string
	/*Permissions
	  Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: ["order", "orderCancel", "withdraw"].

	*/
	Permissions *string
	/*Token
	  OTP Token (YubiKey, Google Authenticator)

	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the API key new params
func (o *APIKeyNewParams) WithTimeout(timeout time.Duration) *APIKeyNewParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the API key new params
func (o *APIKeyNewParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the API key new params
func (o *APIKeyNewParams) WithContext(ctx context.Context) *APIKeyNewParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the API key new params
func (o *APIKeyNewParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the API key new params
func (o *APIKeyNewParams) WithHTTPClient(client *http.Client) *APIKeyNewParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the API key new params
func (o *APIKeyNewParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCidr adds the cidr to the API key new params
func (o *APIKeyNewParams) WithCidr(cidr *string) *APIKeyNewParams {
	o.SetCidr(cidr)
	return o
}

// SetCidr adds the cidr to the API key new params
func (o *APIKeyNewParams) SetCidr(cidr *string) {
	o.Cidr = cidr
}

// WithEnabled adds the enabled to the API key new params
func (o *APIKeyNewParams) WithEnabled(enabled *bool) *APIKeyNewParams {
	o.SetEnabled(enabled)
	return o
}

// SetEnabled adds the enabled to the API key new params
func (o *APIKeyNewParams) SetEnabled(enabled *bool) {
	o.Enabled = enabled
}

// WithName adds the name to the API key new params
func (o *APIKeyNewParams) WithName(name *string) *APIKeyNewParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the API key new params
func (o *APIKeyNewParams) SetName(name *string) {
	o.Name = name
}

// WithPermissions adds the permissions to the API key new params
func (o *APIKeyNewParams) WithPermissions(permissions *string) *APIKeyNewParams {
	o.SetPermissions(permissions)
	return o
}

// SetPermissions adds the permissions to the API key new params
func (o *APIKeyNewParams) SetPermissions(permissions *string) {
	o.Permissions = permissions
}

// WithToken adds the token to the API key new params
func (o *APIKeyNewParams) WithToken(token *string) *APIKeyNewParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the API key new params
func (o *APIKeyNewParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *APIKeyNewParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cidr != nil {

		// form param cidr
		var frCidr string
		if o.Cidr != nil {
			frCidr = *o.Cidr
		}
		fCidr := frCidr
		if fCidr != "" {
			if err := r.SetFormParam("cidr", fCidr); err != nil {
				return err
			}
		}

	}

	if o.Enabled != nil {

		// form param enabled
		var frEnabled bool
		if o.Enabled != nil {
			frEnabled = *o.Enabled
		}
		fEnabled := swag.FormatBool(frEnabled)
		if fEnabled != "" {
			if err := r.SetFormParam("enabled", fEnabled); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}

	}

	if o.Permissions != nil {

		// form param permissions
		var frPermissions string
		if o.Permissions != nil {
			frPermissions = *o.Permissions
		}
		fPermissions := frPermissions
		if fPermissions != "" {
			if err := r.SetFormParam("permissions", fPermissions); err != nil {
				return err
			}
		}

	}

	if o.Token != nil {

		// form param token
		var frToken string
		if o.Token != nil {
			frToken = *o.Token
		}
		fToken := frToken
		if fToken != "" {
			if err := r.SetFormParam("token", fToken); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
