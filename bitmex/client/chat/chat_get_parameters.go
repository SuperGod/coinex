// Code generated by go-swagger; DO NOT EDIT.

package chat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewChatGetParams creates a new ChatGetParams object
// with the default values initialized.
func NewChatGetParams() *ChatGetParams {
	var (
		countDefault   = int32(100)
		reverseDefault = bool(true)
		startDefault   = int32(0)
	)
	return &ChatGetParams{
		Count:   &countDefault,
		Reverse: &reverseDefault,
		Start:   &startDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewChatGetParamsWithTimeout creates a new ChatGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewChatGetParamsWithTimeout(timeout time.Duration) *ChatGetParams {
	var (
		countDefault   = int32(100)
		reverseDefault = bool(true)
		startDefault   = int32(0)
	)
	return &ChatGetParams{
		Count:   &countDefault,
		Reverse: &reverseDefault,
		Start:   &startDefault,

		timeout: timeout,
	}
}

// NewChatGetParamsWithContext creates a new ChatGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewChatGetParamsWithContext(ctx context.Context) *ChatGetParams {
	var (
		countDefault   = int32(100)
		reverseDefault = bool(true)
		startDefault   = int32(0)
	)
	return &ChatGetParams{
		Count:   &countDefault,
		Reverse: &reverseDefault,
		Start:   &startDefault,

		Context: ctx,
	}
}

// NewChatGetParamsWithHTTPClient creates a new ChatGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewChatGetParamsWithHTTPClient(client *http.Client) *ChatGetParams {
	var (
		countDefault   = int32(100)
		reverseDefault = bool(true)
		startDefault   = int32(0)
	)
	return &ChatGetParams{
		Count:      &countDefault,
		Reverse:    &reverseDefault,
		Start:      &startDefault,
		HTTPClient: client,
	}
}

/*ChatGetParams contains all the parameters to send to the API endpoint
for the chat get operation typically these are written to a http.Request
*/
type ChatGetParams struct {

	/*ChannelID
	  Channel id. GET /chat/channels for ids. Leave blank for all.

	*/
	ChannelID *float64
	/*Count
	  Number of results to fetch.

	*/
	Count *int32
	/*Reverse
	  If true, will sort results newest first.

	*/
	Reverse *bool
	/*Start
	  Starting ID for results.

	*/
	Start *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the chat get params
func (o *ChatGetParams) WithTimeout(timeout time.Duration) *ChatGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the chat get params
func (o *ChatGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the chat get params
func (o *ChatGetParams) WithContext(ctx context.Context) *ChatGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the chat get params
func (o *ChatGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the chat get params
func (o *ChatGetParams) WithHTTPClient(client *http.Client) *ChatGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the chat get params
func (o *ChatGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChannelID adds the channelID to the chat get params
func (o *ChatGetParams) WithChannelID(channelID *float64) *ChatGetParams {
	o.SetChannelID(channelID)
	return o
}

// SetChannelID adds the channelId to the chat get params
func (o *ChatGetParams) SetChannelID(channelID *float64) {
	o.ChannelID = channelID
}

// WithCount adds the count to the chat get params
func (o *ChatGetParams) WithCount(count *int32) *ChatGetParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the chat get params
func (o *ChatGetParams) SetCount(count *int32) {
	o.Count = count
}

// WithReverse adds the reverse to the chat get params
func (o *ChatGetParams) WithReverse(reverse *bool) *ChatGetParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the chat get params
func (o *ChatGetParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithStart adds the start to the chat get params
func (o *ChatGetParams) WithStart(start *int32) *ChatGetParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the chat get params
func (o *ChatGetParams) SetStart(start *int32) {
	o.Start = start
}

// WriteToRequest writes these params to a swagger request
func (o *ChatGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ChannelID != nil {

		// query param channelID
		var qrChannelID float64
		if o.ChannelID != nil {
			qrChannelID = *o.ChannelID
		}
		qChannelID := swag.FormatFloat64(qrChannelID)
		if qChannelID != "" {
			if err := r.SetQueryParam("channelID", qChannelID); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount int32
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool
		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {
			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}

	}

	if o.Start != nil {

		// query param start
		var qrStart int32
		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := swag.FormatInt32(qrStart)
		if qStart != "" {
			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
