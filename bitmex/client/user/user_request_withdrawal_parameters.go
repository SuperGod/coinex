// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUserRequestWithdrawalParams creates a new UserRequestWithdrawalParams object
// with the default values initialized.
func NewUserRequestWithdrawalParams() *UserRequestWithdrawalParams {
	var (
		currencyDefault = string("XBt")
	)
	return &UserRequestWithdrawalParams{
		Currency: currencyDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewUserRequestWithdrawalParamsWithTimeout creates a new UserRequestWithdrawalParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUserRequestWithdrawalParamsWithTimeout(timeout time.Duration) *UserRequestWithdrawalParams {
	var (
		currencyDefault = string("XBt")
	)
	return &UserRequestWithdrawalParams{
		Currency: currencyDefault,

		timeout: timeout,
	}
}

// NewUserRequestWithdrawalParamsWithContext creates a new UserRequestWithdrawalParams object
// with the default values initialized, and the ability to set a context for a request
func NewUserRequestWithdrawalParamsWithContext(ctx context.Context) *UserRequestWithdrawalParams {
	var (
		currencyDefault = string("XBt")
	)
	return &UserRequestWithdrawalParams{
		Currency: currencyDefault,

		Context: ctx,
	}
}

// NewUserRequestWithdrawalParamsWithHTTPClient creates a new UserRequestWithdrawalParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUserRequestWithdrawalParamsWithHTTPClient(client *http.Client) *UserRequestWithdrawalParams {
	var (
		currencyDefault = string("XBt")
	)
	return &UserRequestWithdrawalParams{
		Currency:   currencyDefault,
		HTTPClient: client,
	}
}

/*UserRequestWithdrawalParams contains all the parameters to send to the API endpoint
for the user request withdrawal operation typically these are written to a http.Request
*/
type UserRequestWithdrawalParams struct {

	/*Address
	  Destination Address.

	*/
	Address string
	/*Amount
	  Amount of withdrawal currency.

	*/
	Amount int64
	/*Currency
	  Currency you're withdrawing. Options: `XBt`

	*/
	Currency string
	/*Fee
	  Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email.

	*/
	Fee *float64
	/*OtpToken
	  2FA token. Required if 2FA is enabled on your account.

	*/
	OtpToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the user request withdrawal params
func (o *UserRequestWithdrawalParams) WithTimeout(timeout time.Duration) *UserRequestWithdrawalParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the user request withdrawal params
func (o *UserRequestWithdrawalParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the user request withdrawal params
func (o *UserRequestWithdrawalParams) WithContext(ctx context.Context) *UserRequestWithdrawalParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the user request withdrawal params
func (o *UserRequestWithdrawalParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the user request withdrawal params
func (o *UserRequestWithdrawalParams) WithHTTPClient(client *http.Client) *UserRequestWithdrawalParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the user request withdrawal params
func (o *UserRequestWithdrawalParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddress adds the address to the user request withdrawal params
func (o *UserRequestWithdrawalParams) WithAddress(address string) *UserRequestWithdrawalParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the user request withdrawal params
func (o *UserRequestWithdrawalParams) SetAddress(address string) {
	o.Address = address
}

// WithAmount adds the amount to the user request withdrawal params
func (o *UserRequestWithdrawalParams) WithAmount(amount int64) *UserRequestWithdrawalParams {
	o.SetAmount(amount)
	return o
}

// SetAmount adds the amount to the user request withdrawal params
func (o *UserRequestWithdrawalParams) SetAmount(amount int64) {
	o.Amount = amount
}

// WithCurrency adds the currency to the user request withdrawal params
func (o *UserRequestWithdrawalParams) WithCurrency(currency string) *UserRequestWithdrawalParams {
	o.SetCurrency(currency)
	return o
}

// SetCurrency adds the currency to the user request withdrawal params
func (o *UserRequestWithdrawalParams) SetCurrency(currency string) {
	o.Currency = currency
}

// WithFee adds the fee to the user request withdrawal params
func (o *UserRequestWithdrawalParams) WithFee(fee *float64) *UserRequestWithdrawalParams {
	o.SetFee(fee)
	return o
}

// SetFee adds the fee to the user request withdrawal params
func (o *UserRequestWithdrawalParams) SetFee(fee *float64) {
	o.Fee = fee
}

// WithOtpToken adds the otpToken to the user request withdrawal params
func (o *UserRequestWithdrawalParams) WithOtpToken(otpToken *string) *UserRequestWithdrawalParams {
	o.SetOtpToken(otpToken)
	return o
}

// SetOtpToken adds the otpToken to the user request withdrawal params
func (o *UserRequestWithdrawalParams) SetOtpToken(otpToken *string) {
	o.OtpToken = otpToken
}

// WriteToRequest writes these params to a swagger request
func (o *UserRequestWithdrawalParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param address
	frAddress := o.Address
	fAddress := frAddress
	if fAddress != "" {
		if err := r.SetFormParam("address", fAddress); err != nil {
			return err
		}
	}

	// form param amount
	frAmount := o.Amount
	fAmount := swag.FormatInt64(frAmount)
	if fAmount != "" {
		if err := r.SetFormParam("amount", fAmount); err != nil {
			return err
		}
	}

	// form param currency
	frCurrency := o.Currency
	fCurrency := frCurrency
	if fCurrency != "" {
		if err := r.SetFormParam("currency", fCurrency); err != nil {
			return err
		}
	}

	if o.Fee != nil {

		// form param fee
		var frFee float64
		if o.Fee != nil {
			frFee = *o.Fee
		}
		fFee := swag.FormatFloat64(frFee)
		if fFee != "" {
			if err := r.SetFormParam("fee", fFee); err != nil {
				return err
			}
		}

	}

	if o.OtpToken != nil {

		// form param otpToken
		var frOtpToken string
		if o.OtpToken != nil {
			frOtpToken = *o.OtpToken
		}
		fOtpToken := frOtpToken
		if fOtpToken != "" {
			if err := r.SetFormParam("otpToken", fOtpToken); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
