// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUserSavePreferencesParams creates a new UserSavePreferencesParams object
// with the default values initialized.
func NewUserSavePreferencesParams() *UserSavePreferencesParams {
	var (
		overwriteDefault = bool(false)
	)
	return &UserSavePreferencesParams{
		Overwrite: &overwriteDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewUserSavePreferencesParamsWithTimeout creates a new UserSavePreferencesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUserSavePreferencesParamsWithTimeout(timeout time.Duration) *UserSavePreferencesParams {
	var (
		overwriteDefault = bool(false)
	)
	return &UserSavePreferencesParams{
		Overwrite: &overwriteDefault,

		timeout: timeout,
	}
}

// NewUserSavePreferencesParamsWithContext creates a new UserSavePreferencesParams object
// with the default values initialized, and the ability to set a context for a request
func NewUserSavePreferencesParamsWithContext(ctx context.Context) *UserSavePreferencesParams {
	var (
		overwriteDefault = bool(false)
	)
	return &UserSavePreferencesParams{
		Overwrite: &overwriteDefault,

		Context: ctx,
	}
}

// NewUserSavePreferencesParamsWithHTTPClient creates a new UserSavePreferencesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUserSavePreferencesParamsWithHTTPClient(client *http.Client) *UserSavePreferencesParams {
	var (
		overwriteDefault = bool(false)
	)
	return &UserSavePreferencesParams{
		Overwrite:  &overwriteDefault,
		HTTPClient: client,
	}
}

/*UserSavePreferencesParams contains all the parameters to send to the API endpoint
for the user save preferences operation typically these are written to a http.Request
*/
type UserSavePreferencesParams struct {

	/*Overwrite
	  If true, will overwrite all existing preferences.

	*/
	Overwrite *bool
	/*Prefs*/
	Prefs string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the user save preferences params
func (o *UserSavePreferencesParams) WithTimeout(timeout time.Duration) *UserSavePreferencesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the user save preferences params
func (o *UserSavePreferencesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the user save preferences params
func (o *UserSavePreferencesParams) WithContext(ctx context.Context) *UserSavePreferencesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the user save preferences params
func (o *UserSavePreferencesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the user save preferences params
func (o *UserSavePreferencesParams) WithHTTPClient(client *http.Client) *UserSavePreferencesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the user save preferences params
func (o *UserSavePreferencesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOverwrite adds the overwrite to the user save preferences params
func (o *UserSavePreferencesParams) WithOverwrite(overwrite *bool) *UserSavePreferencesParams {
	o.SetOverwrite(overwrite)
	return o
}

// SetOverwrite adds the overwrite to the user save preferences params
func (o *UserSavePreferencesParams) SetOverwrite(overwrite *bool) {
	o.Overwrite = overwrite
}

// WithPrefs adds the prefs to the user save preferences params
func (o *UserSavePreferencesParams) WithPrefs(prefs string) *UserSavePreferencesParams {
	o.SetPrefs(prefs)
	return o
}

// SetPrefs adds the prefs to the user save preferences params
func (o *UserSavePreferencesParams) SetPrefs(prefs string) {
	o.Prefs = prefs
}

// WriteToRequest writes these params to a swagger request
func (o *UserSavePreferencesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Overwrite != nil {

		// form param overwrite
		var frOverwrite bool
		if o.Overwrite != nil {
			frOverwrite = *o.Overwrite
		}
		fOverwrite := swag.FormatBool(frOverwrite)
		if fOverwrite != "" {
			if err := r.SetFormParam("overwrite", fOverwrite); err != nil {
				return err
			}
		}

	}

	// form param prefs
	frPrefs := o.Prefs
	fPrefs := frPrefs
	if fPrefs != "" {
		if err := r.SetFormParam("prefs", fPrefs); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
