// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUserRequestEnableTFAParams creates a new UserRequestEnableTFAParams object
// with the default values initialized.
func NewUserRequestEnableTFAParams() *UserRequestEnableTFAParams {
	var ()
	return &UserRequestEnableTFAParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUserRequestEnableTFAParamsWithTimeout creates a new UserRequestEnableTFAParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUserRequestEnableTFAParamsWithTimeout(timeout time.Duration) *UserRequestEnableTFAParams {
	var ()
	return &UserRequestEnableTFAParams{

		timeout: timeout,
	}
}

// NewUserRequestEnableTFAParamsWithContext creates a new UserRequestEnableTFAParams object
// with the default values initialized, and the ability to set a context for a request
func NewUserRequestEnableTFAParamsWithContext(ctx context.Context) *UserRequestEnableTFAParams {
	var ()
	return &UserRequestEnableTFAParams{

		Context: ctx,
	}
}

// NewUserRequestEnableTFAParamsWithHTTPClient creates a new UserRequestEnableTFAParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUserRequestEnableTFAParamsWithHTTPClient(client *http.Client) *UserRequestEnableTFAParams {
	var ()
	return &UserRequestEnableTFAParams{
		HTTPClient: client,
	}
}

/*UserRequestEnableTFAParams contains all the parameters to send to the API endpoint
for the user request enable t f a operation typically these are written to a http.Request
*/
type UserRequestEnableTFAParams struct {

	/*Type
	  Two-factor auth type. Supported types: 'GA' (Google Authenticator)

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the user request enable t f a params
func (o *UserRequestEnableTFAParams) WithTimeout(timeout time.Duration) *UserRequestEnableTFAParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the user request enable t f a params
func (o *UserRequestEnableTFAParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the user request enable t f a params
func (o *UserRequestEnableTFAParams) WithContext(ctx context.Context) *UserRequestEnableTFAParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the user request enable t f a params
func (o *UserRequestEnableTFAParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the user request enable t f a params
func (o *UserRequestEnableTFAParams) WithHTTPClient(client *http.Client) *UserRequestEnableTFAParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the user request enable t f a params
func (o *UserRequestEnableTFAParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithType adds the typeVar to the user request enable t f a params
func (o *UserRequestEnableTFAParams) WithType(typeVar *string) *UserRequestEnableTFAParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the user request enable t f a params
func (o *UserRequestEnableTFAParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *UserRequestEnableTFAParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Type != nil {

		// form param type
		var frType string
		if o.Type != nil {
			frType = *o.Type
		}
		fType := frType
		if fType != "" {
			if err := r.SetFormParam("type", fType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
