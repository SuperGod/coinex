// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
UserCancelWithdrawal cancels a withdrawal
*/
func (a *Client) UserCancelWithdrawal(params *UserCancelWithdrawalParams) (*UserCancelWithdrawalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCancelWithdrawalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.cancelWithdrawal",
		Method:             "POST",
		PathPattern:        "/user/cancelWithdrawal",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCancelWithdrawalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCancelWithdrawalOK), nil

}

/*
UserCheckReferralCode checks if a referral code is valid

If the code is valid, responds with the referral code's discount (e.g. `0.1` for 10%). Otherwise, will return a 404.
*/
func (a *Client) UserCheckReferralCode(params *UserCheckReferralCodeParams) (*UserCheckReferralCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCheckReferralCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.checkReferralCode",
		Method:             "GET",
		PathPattern:        "/user/checkReferralCode",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCheckReferralCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCheckReferralCodeOK), nil

}

/*
UserConfirm confirms your email address with a token
*/
func (a *Client) UserConfirm(params *UserConfirmParams) (*UserConfirmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserConfirmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.confirm",
		Method:             "POST",
		PathPattern:        "/user/confirmEmail",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserConfirmReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserConfirmOK), nil

}

/*
UserConfirmEnableTFA confirms two factor auth for this account if using a yubikey simply send a token to this endpoint
*/
func (a *Client) UserConfirmEnableTFA(params *UserConfirmEnableTFAParams, authInfo runtime.ClientAuthInfoWriter) (*UserConfirmEnableTFAOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserConfirmEnableTFAParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.confirmEnableTFA",
		Method:             "POST",
		PathPattern:        "/user/confirmEnableTFA",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserConfirmEnableTFAReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserConfirmEnableTFAOK), nil

}

/*
UserConfirmWithdrawal confirms a withdrawal
*/
func (a *Client) UserConfirmWithdrawal(params *UserConfirmWithdrawalParams) (*UserConfirmWithdrawalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserConfirmWithdrawalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.confirmWithdrawal",
		Method:             "POST",
		PathPattern:        "/user/confirmWithdrawal",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserConfirmWithdrawalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserConfirmWithdrawalOK), nil

}

/*
UserDisableTFA disables two factor auth for this account
*/
func (a *Client) UserDisableTFA(params *UserDisableTFAParams, authInfo runtime.ClientAuthInfoWriter) (*UserDisableTFAOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserDisableTFAParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.disableTFA",
		Method:             "POST",
		PathPattern:        "/user/disableTFA",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserDisableTFAReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserDisableTFAOK), nil

}

/*
UserGet gets your user model
*/
func (a *Client) UserGet(params *UserGetParams, authInfo runtime.ClientAuthInfoWriter) (*UserGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.get",
		Method:             "GET",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserGetOK), nil

}

/*
UserGetAffiliateStatus gets your current affiliate referral status
*/
func (a *Client) UserGetAffiliateStatus(params *UserGetAffiliateStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UserGetAffiliateStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetAffiliateStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.getAffiliateStatus",
		Method:             "GET",
		PathPattern:        "/user/affiliateStatus",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGetAffiliateStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserGetAffiliateStatusOK), nil

}

/*
UserGetCommission gets your account s commission status
*/
func (a *Client) UserGetCommission(params *UserGetCommissionParams, authInfo runtime.ClientAuthInfoWriter) (*UserGetCommissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetCommissionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.getCommission",
		Method:             "GET",
		PathPattern:        "/user/commission",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGetCommissionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserGetCommissionOK), nil

}

/*
UserGetDepositAddress gets a deposit address
*/
func (a *Client) UserGetDepositAddress(params *UserGetDepositAddressParams, authInfo runtime.ClientAuthInfoWriter) (*UserGetDepositAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetDepositAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.getDepositAddress",
		Method:             "GET",
		PathPattern:        "/user/depositAddress",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGetDepositAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserGetDepositAddressOK), nil

}

/*
UserGetMargin gets your account s margin status send a currency of all to receive an array of all supported currencies
*/
func (a *Client) UserGetMargin(params *UserGetMarginParams, authInfo runtime.ClientAuthInfoWriter) (*UserGetMarginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetMarginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.getMargin",
		Method:             "GET",
		PathPattern:        "/user/margin",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGetMarginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserGetMarginOK), nil

}

/*
UserGetWallet gets your current wallet information
*/
func (a *Client) UserGetWallet(params *UserGetWalletParams, authInfo runtime.ClientAuthInfoWriter) (*UserGetWalletOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetWalletParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.getWallet",
		Method:             "GET",
		PathPattern:        "/user/wallet",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGetWalletReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserGetWalletOK), nil

}

/*
UserGetWalletHistory gets a history of all of your wallet transactions deposits withdrawals p n l
*/
func (a *Client) UserGetWalletHistory(params *UserGetWalletHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*UserGetWalletHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetWalletHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.getWalletHistory",
		Method:             "GET",
		PathPattern:        "/user/walletHistory",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGetWalletHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserGetWalletHistoryOK), nil

}

/*
UserGetWalletSummary gets a summary of all of your wallet transactions deposits withdrawals p n l
*/
func (a *Client) UserGetWalletSummary(params *UserGetWalletSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*UserGetWalletSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetWalletSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.getWalletSummary",
		Method:             "GET",
		PathPattern:        "/user/walletSummary",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGetWalletSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserGetWalletSummaryOK), nil

}

/*
UserLogout logs out of bit m e x
*/
func (a *Client) UserLogout(params *UserLogoutParams) (*UserLogoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserLogoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.logout",
		Method:             "POST",
		PathPattern:        "/user/logout",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserLogoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserLogoutOK), nil

}

/*
UserLogoutAll logs all systems out of bit m e x this will revoke all of your account s access tokens logging you out on all devices
*/
func (a *Client) UserLogoutAll(params *UserLogoutAllParams, authInfo runtime.ClientAuthInfoWriter) (*UserLogoutAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserLogoutAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.logoutAll",
		Method:             "POST",
		PathPattern:        "/user/logoutAll",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserLogoutAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserLogoutAllOK), nil

}

/*
UserMinWithdrawalFee gets the minimum withdrawal fee for a currency

This is changed based on network conditions to ensure timely withdrawals. During network congestion, this may be high. The fee is returned in the same currency.
*/
func (a *Client) UserMinWithdrawalFee(params *UserMinWithdrawalFeeParams) (*UserMinWithdrawalFeeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserMinWithdrawalFeeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.minWithdrawalFee",
		Method:             "GET",
		PathPattern:        "/user/minWithdrawalFee",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserMinWithdrawalFeeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserMinWithdrawalFeeOK), nil

}

/*
UserRequestEnableTFA gets secret key for setting up two factor auth

Use /confirmEnableTFA directly for Yubikeys. This fails if TFA is already enabled.
*/
func (a *Client) UserRequestEnableTFA(params *UserRequestEnableTFAParams, authInfo runtime.ClientAuthInfoWriter) (*UserRequestEnableTFAOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserRequestEnableTFAParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.requestEnableTFA",
		Method:             "POST",
		PathPattern:        "/user/requestEnableTFA",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserRequestEnableTFAReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserRequestEnableTFAOK), nil

}

/*
UserRequestWithdrawal requests a withdrawal to an external wallet

This will send a confirmation email to the email address on record, unless requested via an API Key with the `withdraw` permission.
*/
func (a *Client) UserRequestWithdrawal(params *UserRequestWithdrawalParams, authInfo runtime.ClientAuthInfoWriter) (*UserRequestWithdrawalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserRequestWithdrawalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.requestWithdrawal",
		Method:             "POST",
		PathPattern:        "/user/requestWithdrawal",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserRequestWithdrawalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserRequestWithdrawalOK), nil

}

/*
UserSavePreferences saves user preferences
*/
func (a *Client) UserSavePreferences(params *UserSavePreferencesParams, authInfo runtime.ClientAuthInfoWriter) (*UserSavePreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserSavePreferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.savePreferences",
		Method:             "POST",
		PathPattern:        "/user/preferences",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserSavePreferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserSavePreferencesOK), nil

}

/*
UserUpdate updates your password name and other attributes
*/
func (a *Client) UserUpdate(params *UserUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*UserUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.update",
		Method:             "PUT",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
