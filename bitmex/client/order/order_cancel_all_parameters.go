// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewOrderCancelAllParams creates a new OrderCancelAllParams object
// with the default values initialized.
func NewOrderCancelAllParams() *OrderCancelAllParams {
	var ()
	return &OrderCancelAllParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewOrderCancelAllParamsWithTimeout creates a new OrderCancelAllParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewOrderCancelAllParamsWithTimeout(timeout time.Duration) *OrderCancelAllParams {
	var ()
	return &OrderCancelAllParams{

		timeout: timeout,
	}
}

// NewOrderCancelAllParamsWithContext creates a new OrderCancelAllParams object
// with the default values initialized, and the ability to set a context for a request
func NewOrderCancelAllParamsWithContext(ctx context.Context) *OrderCancelAllParams {
	var ()
	return &OrderCancelAllParams{

		Context: ctx,
	}
}

// NewOrderCancelAllParamsWithHTTPClient creates a new OrderCancelAllParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewOrderCancelAllParamsWithHTTPClient(client *http.Client) *OrderCancelAllParams {
	var ()
	return &OrderCancelAllParams{
		HTTPClient: client,
	}
}

/*OrderCancelAllParams contains all the parameters to send to the API endpoint
for the order cancel all operation typically these are written to a http.Request
*/
type OrderCancelAllParams struct {

	/*Filter
	  Optional filter for cancellation. Use to only cancel some orders, e.g. `{"side": "Buy"}`.

	*/
	Filter *string
	/*Symbol
	  Optional symbol. If provided, only cancels orders for that symbol.

	*/
	Symbol *string
	/*Text
	  Optional cancellation annotation. e.g. 'Spread Exceeded'

	*/
	Text *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the order cancel all params
func (o *OrderCancelAllParams) WithTimeout(timeout time.Duration) *OrderCancelAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the order cancel all params
func (o *OrderCancelAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the order cancel all params
func (o *OrderCancelAllParams) WithContext(ctx context.Context) *OrderCancelAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the order cancel all params
func (o *OrderCancelAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the order cancel all params
func (o *OrderCancelAllParams) WithHTTPClient(client *http.Client) *OrderCancelAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the order cancel all params
func (o *OrderCancelAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the order cancel all params
func (o *OrderCancelAllParams) WithFilter(filter *string) *OrderCancelAllParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the order cancel all params
func (o *OrderCancelAllParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithSymbol adds the symbol to the order cancel all params
func (o *OrderCancelAllParams) WithSymbol(symbol *string) *OrderCancelAllParams {
	o.SetSymbol(symbol)
	return o
}

// SetSymbol adds the symbol to the order cancel all params
func (o *OrderCancelAllParams) SetSymbol(symbol *string) {
	o.Symbol = symbol
}

// WithText adds the text to the order cancel all params
func (o *OrderCancelAllParams) WithText(text *string) *OrderCancelAllParams {
	o.SetText(text)
	return o
}

// SetText adds the text to the order cancel all params
func (o *OrderCancelAllParams) SetText(text *string) {
	o.Text = text
}

// WriteToRequest writes these params to a swagger request
func (o *OrderCancelAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// form param filter
		var frFilter string
		if o.Filter != nil {
			frFilter = *o.Filter
		}
		fFilter := frFilter
		if fFilter != "" {
			if err := r.SetFormParam("filter", fFilter); err != nil {
				return err
			}
		}

	}

	if o.Symbol != nil {

		// form param symbol
		var frSymbol string
		if o.Symbol != nil {
			frSymbol = *o.Symbol
		}
		fSymbol := frSymbol
		if fSymbol != "" {
			if err := r.SetFormParam("symbol", fSymbol); err != nil {
				return err
			}
		}

	}

	if o.Text != nil {

		// form param text
		var frText string
		if o.Text != nil {
			frText = *o.Text
		}
		fText := frText
		if fText != "" {
			if err := r.SetFormParam("text", fText); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
