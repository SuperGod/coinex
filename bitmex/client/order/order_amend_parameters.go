// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewOrderAmendParams creates a new OrderAmendParams object
// with the default values initialized.
func NewOrderAmendParams() *OrderAmendParams {
	var ()
	return &OrderAmendParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewOrderAmendParamsWithTimeout creates a new OrderAmendParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewOrderAmendParamsWithTimeout(timeout time.Duration) *OrderAmendParams {
	var ()
	return &OrderAmendParams{

		timeout: timeout,
	}
}

// NewOrderAmendParamsWithContext creates a new OrderAmendParams object
// with the default values initialized, and the ability to set a context for a request
func NewOrderAmendParamsWithContext(ctx context.Context) *OrderAmendParams {
	var ()
	return &OrderAmendParams{

		Context: ctx,
	}
}

// NewOrderAmendParamsWithHTTPClient creates a new OrderAmendParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewOrderAmendParamsWithHTTPClient(client *http.Client) *OrderAmendParams {
	var ()
	return &OrderAmendParams{
		HTTPClient: client,
	}
}

/*OrderAmendParams contains all the parameters to send to the API endpoint
for the order amend operation typically these are written to a http.Request
*/
type OrderAmendParams struct {

	/*ClOrdID
	  Optional new Client Order ID, requires `origClOrdID`.

	*/
	ClOrdID *string
	/*LeavesQty
	  Optional leaves quantity in units of the instrument (i.e. contracts). Useful for amending partially filled orders.

	*/
	LeavesQty *int32
	/*OrderID
	  Order ID

	*/
	OrderID *string
	/*OrderQty
	  Optional order quantity in units of the instrument (i.e. contracts).

	*/
	OrderQty *int32
	/*OrigClOrdID
	  Client Order ID. See POST /order.

	*/
	OrigClOrdID *string
	/*PegOffsetValue
	  Optional trailing offset from the current price for 'Stop', 'StopLimit', 'MarketIfTouched', and 'LimitIfTouched' orders; use a negative offset for stop-sell orders and buy-if-touched orders. Optional offset from the peg price for 'Pegged' orders.

	*/
	PegOffsetValue *float64
	/*Price
	  Optional limit price for 'Limit', 'StopLimit', and 'LimitIfTouched' orders.

	*/
	Price *float64
	/*SimpleLeavesQty
	  Optional leaves quantity in units of the underlying instrument (i.e. Bitcoin). Useful for amending partially filled orders.

	*/
	SimpleLeavesQty *float64
	/*SimpleOrderQty
	  Optional order quantity in units of the underlying instrument (i.e. Bitcoin).

	*/
	SimpleOrderQty *float64
	/*StopPx
	  Optional trigger price for 'Stop', 'StopLimit', 'MarketIfTouched', and 'LimitIfTouched' orders. Use a price below the current price for stop-sell orders and buy-if-touched orders.

	*/
	StopPx *float64
	/*Text
	  Optional amend annotation. e.g. 'Adjust skew'.

	*/
	Text *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the order amend params
func (o *OrderAmendParams) WithTimeout(timeout time.Duration) *OrderAmendParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the order amend params
func (o *OrderAmendParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the order amend params
func (o *OrderAmendParams) WithContext(ctx context.Context) *OrderAmendParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the order amend params
func (o *OrderAmendParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the order amend params
func (o *OrderAmendParams) WithHTTPClient(client *http.Client) *OrderAmendParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the order amend params
func (o *OrderAmendParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClOrdID adds the clOrdID to the order amend params
func (o *OrderAmendParams) WithClOrdID(clOrdID *string) *OrderAmendParams {
	o.SetClOrdID(clOrdID)
	return o
}

// SetClOrdID adds the clOrdId to the order amend params
func (o *OrderAmendParams) SetClOrdID(clOrdID *string) {
	o.ClOrdID = clOrdID
}

// WithLeavesQty adds the leavesQty to the order amend params
func (o *OrderAmendParams) WithLeavesQty(leavesQty *int32) *OrderAmendParams {
	o.SetLeavesQty(leavesQty)
	return o
}

// SetLeavesQty adds the leavesQty to the order amend params
func (o *OrderAmendParams) SetLeavesQty(leavesQty *int32) {
	o.LeavesQty = leavesQty
}

// WithOrderID adds the orderID to the order amend params
func (o *OrderAmendParams) WithOrderID(orderID *string) *OrderAmendParams {
	o.SetOrderID(orderID)
	return o
}

// SetOrderID adds the orderId to the order amend params
func (o *OrderAmendParams) SetOrderID(orderID *string) {
	o.OrderID = orderID
}

// WithOrderQty adds the orderQty to the order amend params
func (o *OrderAmendParams) WithOrderQty(orderQty *int32) *OrderAmendParams {
	o.SetOrderQty(orderQty)
	return o
}

// SetOrderQty adds the orderQty to the order amend params
func (o *OrderAmendParams) SetOrderQty(orderQty *int32) {
	o.OrderQty = orderQty
}

// WithOrigClOrdID adds the origClOrdID to the order amend params
func (o *OrderAmendParams) WithOrigClOrdID(origClOrdID *string) *OrderAmendParams {
	o.SetOrigClOrdID(origClOrdID)
	return o
}

// SetOrigClOrdID adds the origClOrdId to the order amend params
func (o *OrderAmendParams) SetOrigClOrdID(origClOrdID *string) {
	o.OrigClOrdID = origClOrdID
}

// WithPegOffsetValue adds the pegOffsetValue to the order amend params
func (o *OrderAmendParams) WithPegOffsetValue(pegOffsetValue *float64) *OrderAmendParams {
	o.SetPegOffsetValue(pegOffsetValue)
	return o
}

// SetPegOffsetValue adds the pegOffsetValue to the order amend params
func (o *OrderAmendParams) SetPegOffsetValue(pegOffsetValue *float64) {
	o.PegOffsetValue = pegOffsetValue
}

// WithPrice adds the price to the order amend params
func (o *OrderAmendParams) WithPrice(price *float64) *OrderAmendParams {
	o.SetPrice(price)
	return o
}

// SetPrice adds the price to the order amend params
func (o *OrderAmendParams) SetPrice(price *float64) {
	o.Price = price
}

// WithSimpleLeavesQty adds the simpleLeavesQty to the order amend params
func (o *OrderAmendParams) WithSimpleLeavesQty(simpleLeavesQty *float64) *OrderAmendParams {
	o.SetSimpleLeavesQty(simpleLeavesQty)
	return o
}

// SetSimpleLeavesQty adds the simpleLeavesQty to the order amend params
func (o *OrderAmendParams) SetSimpleLeavesQty(simpleLeavesQty *float64) {
	o.SimpleLeavesQty = simpleLeavesQty
}

// WithSimpleOrderQty adds the simpleOrderQty to the order amend params
func (o *OrderAmendParams) WithSimpleOrderQty(simpleOrderQty *float64) *OrderAmendParams {
	o.SetSimpleOrderQty(simpleOrderQty)
	return o
}

// SetSimpleOrderQty adds the simpleOrderQty to the order amend params
func (o *OrderAmendParams) SetSimpleOrderQty(simpleOrderQty *float64) {
	o.SimpleOrderQty = simpleOrderQty
}

// WithStopPx adds the stopPx to the order amend params
func (o *OrderAmendParams) WithStopPx(stopPx *float64) *OrderAmendParams {
	o.SetStopPx(stopPx)
	return o
}

// SetStopPx adds the stopPx to the order amend params
func (o *OrderAmendParams) SetStopPx(stopPx *float64) {
	o.StopPx = stopPx
}

// WithText adds the text to the order amend params
func (o *OrderAmendParams) WithText(text *string) *OrderAmendParams {
	o.SetText(text)
	return o
}

// SetText adds the text to the order amend params
func (o *OrderAmendParams) SetText(text *string) {
	o.Text = text
}

// WriteToRequest writes these params to a swagger request
func (o *OrderAmendParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClOrdID != nil {

		// form param clOrdID
		var frClOrdID string
		if o.ClOrdID != nil {
			frClOrdID = *o.ClOrdID
		}
		fClOrdID := frClOrdID
		if fClOrdID != "" {
			if err := r.SetFormParam("clOrdID", fClOrdID); err != nil {
				return err
			}
		}

	}

	if o.LeavesQty != nil {

		// form param leavesQty
		var frLeavesQty int32
		if o.LeavesQty != nil {
			frLeavesQty = *o.LeavesQty
		}
		fLeavesQty := swag.FormatInt32(frLeavesQty)
		if fLeavesQty != "" {
			if err := r.SetFormParam("leavesQty", fLeavesQty); err != nil {
				return err
			}
		}

	}

	if o.OrderID != nil {

		// form param orderID
		var frOrderID string
		if o.OrderID != nil {
			frOrderID = *o.OrderID
		}
		fOrderID := frOrderID
		if fOrderID != "" {
			if err := r.SetFormParam("orderID", fOrderID); err != nil {
				return err
			}
		}

	}

	if o.OrderQty != nil {

		// form param orderQty
		var frOrderQty int32
		if o.OrderQty != nil {
			frOrderQty = *o.OrderQty
		}
		fOrderQty := swag.FormatInt32(frOrderQty)
		if fOrderQty != "" {
			if err := r.SetFormParam("orderQty", fOrderQty); err != nil {
				return err
			}
		}

	}

	if o.OrigClOrdID != nil {

		// form param origClOrdID
		var frOrigClOrdID string
		if o.OrigClOrdID != nil {
			frOrigClOrdID = *o.OrigClOrdID
		}
		fOrigClOrdID := frOrigClOrdID
		if fOrigClOrdID != "" {
			if err := r.SetFormParam("origClOrdID", fOrigClOrdID); err != nil {
				return err
			}
		}

	}

	if o.PegOffsetValue != nil {

		// form param pegOffsetValue
		var frPegOffsetValue float64
		if o.PegOffsetValue != nil {
			frPegOffsetValue = *o.PegOffsetValue
		}
		fPegOffsetValue := swag.FormatFloat64(frPegOffsetValue)
		if fPegOffsetValue != "" {
			if err := r.SetFormParam("pegOffsetValue", fPegOffsetValue); err != nil {
				return err
			}
		}

	}

	if o.Price != nil {

		// form param price
		var frPrice float64
		if o.Price != nil {
			frPrice = *o.Price
		}
		fPrice := swag.FormatFloat64(frPrice)
		if fPrice != "" {
			if err := r.SetFormParam("price", fPrice); err != nil {
				return err
			}
		}

	}

	if o.SimpleLeavesQty != nil {

		// form param simpleLeavesQty
		var frSimpleLeavesQty float64
		if o.SimpleLeavesQty != nil {
			frSimpleLeavesQty = *o.SimpleLeavesQty
		}
		fSimpleLeavesQty := swag.FormatFloat64(frSimpleLeavesQty)
		if fSimpleLeavesQty != "" {
			if err := r.SetFormParam("simpleLeavesQty", fSimpleLeavesQty); err != nil {
				return err
			}
		}

	}

	if o.SimpleOrderQty != nil {

		// form param simpleOrderQty
		var frSimpleOrderQty float64
		if o.SimpleOrderQty != nil {
			frSimpleOrderQty = *o.SimpleOrderQty
		}
		fSimpleOrderQty := swag.FormatFloat64(frSimpleOrderQty)
		if fSimpleOrderQty != "" {
			if err := r.SetFormParam("simpleOrderQty", fSimpleOrderQty); err != nil {
				return err
			}
		}

	}

	if o.StopPx != nil {

		// form param stopPx
		var frStopPx float64
		if o.StopPx != nil {
			frStopPx = *o.StopPx
		}
		fStopPx := swag.FormatFloat64(frStopPx)
		if fStopPx != "" {
			if err := r.SetFormParam("stopPx", fStopPx); err != nil {
				return err
			}
		}

	}

	if o.Text != nil {

		// form param text
		var frText string
		if o.Text != nil {
			frText = *o.Text
		}
		fText := frText
		if fText != "" {
			if err := r.SetFormParam("text", fText); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
