// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewOrderClosePositionParams creates a new OrderClosePositionParams object
// with the default values initialized.
func NewOrderClosePositionParams() *OrderClosePositionParams {
	var ()
	return &OrderClosePositionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewOrderClosePositionParamsWithTimeout creates a new OrderClosePositionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewOrderClosePositionParamsWithTimeout(timeout time.Duration) *OrderClosePositionParams {
	var ()
	return &OrderClosePositionParams{

		timeout: timeout,
	}
}

// NewOrderClosePositionParamsWithContext creates a new OrderClosePositionParams object
// with the default values initialized, and the ability to set a context for a request
func NewOrderClosePositionParamsWithContext(ctx context.Context) *OrderClosePositionParams {
	var ()
	return &OrderClosePositionParams{

		Context: ctx,
	}
}

// NewOrderClosePositionParamsWithHTTPClient creates a new OrderClosePositionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewOrderClosePositionParamsWithHTTPClient(client *http.Client) *OrderClosePositionParams {
	var ()
	return &OrderClosePositionParams{
		HTTPClient: client,
	}
}

/*OrderClosePositionParams contains all the parameters to send to the API endpoint
for the order close position operation typically these are written to a http.Request
*/
type OrderClosePositionParams struct {

	/*Price
	  Optional limit price.

	*/
	Price *float64
	/*Symbol
	  Symbol of position to close.

	*/
	Symbol string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the order close position params
func (o *OrderClosePositionParams) WithTimeout(timeout time.Duration) *OrderClosePositionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the order close position params
func (o *OrderClosePositionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the order close position params
func (o *OrderClosePositionParams) WithContext(ctx context.Context) *OrderClosePositionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the order close position params
func (o *OrderClosePositionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the order close position params
func (o *OrderClosePositionParams) WithHTTPClient(client *http.Client) *OrderClosePositionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the order close position params
func (o *OrderClosePositionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPrice adds the price to the order close position params
func (o *OrderClosePositionParams) WithPrice(price *float64) *OrderClosePositionParams {
	o.SetPrice(price)
	return o
}

// SetPrice adds the price to the order close position params
func (o *OrderClosePositionParams) SetPrice(price *float64) {
	o.Price = price
}

// WithSymbol adds the symbol to the order close position params
func (o *OrderClosePositionParams) WithSymbol(symbol string) *OrderClosePositionParams {
	o.SetSymbol(symbol)
	return o
}

// SetSymbol adds the symbol to the order close position params
func (o *OrderClosePositionParams) SetSymbol(symbol string) {
	o.Symbol = symbol
}

// WriteToRequest writes these params to a swagger request
func (o *OrderClosePositionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Price != nil {

		// form param price
		var frPrice float64
		if o.Price != nil {
			frPrice = *o.Price
		}
		fPrice := swag.FormatFloat64(frPrice)
		if fPrice != "" {
			if err := r.SetFormParam("price", fPrice); err != nil {
				return err
			}
		}

	}

	// form param symbol
	frSymbol := o.Symbol
	fSymbol := frSymbol
	if fSymbol != "" {
		if err := r.SetFormParam("symbol", fSymbol); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
