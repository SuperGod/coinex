// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewOrderCancelParams creates a new OrderCancelParams object
// with the default values initialized.
func NewOrderCancelParams() *OrderCancelParams {
	var ()
	return &OrderCancelParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewOrderCancelParamsWithTimeout creates a new OrderCancelParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewOrderCancelParamsWithTimeout(timeout time.Duration) *OrderCancelParams {
	var ()
	return &OrderCancelParams{

		timeout: timeout,
	}
}

// NewOrderCancelParamsWithContext creates a new OrderCancelParams object
// with the default values initialized, and the ability to set a context for a request
func NewOrderCancelParamsWithContext(ctx context.Context) *OrderCancelParams {
	var ()
	return &OrderCancelParams{

		Context: ctx,
	}
}

// NewOrderCancelParamsWithHTTPClient creates a new OrderCancelParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewOrderCancelParamsWithHTTPClient(client *http.Client) *OrderCancelParams {
	var ()
	return &OrderCancelParams{
		HTTPClient: client,
	}
}

/*OrderCancelParams contains all the parameters to send to the API endpoint
for the order cancel operation typically these are written to a http.Request
*/
type OrderCancelParams struct {

	/*ClOrdID
	  Client Order ID(s). See POST /order.

	*/
	ClOrdID *string
	/*OrderID
	  Order ID(s).

	*/
	OrderID *string
	/*Text
	  Optional cancellation annotation. e.g. 'Spread Exceeded'.

	*/
	Text *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the order cancel params
func (o *OrderCancelParams) WithTimeout(timeout time.Duration) *OrderCancelParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the order cancel params
func (o *OrderCancelParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the order cancel params
func (o *OrderCancelParams) WithContext(ctx context.Context) *OrderCancelParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the order cancel params
func (o *OrderCancelParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the order cancel params
func (o *OrderCancelParams) WithHTTPClient(client *http.Client) *OrderCancelParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the order cancel params
func (o *OrderCancelParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClOrdID adds the clOrdID to the order cancel params
func (o *OrderCancelParams) WithClOrdID(clOrdID *string) *OrderCancelParams {
	o.SetClOrdID(clOrdID)
	return o
}

// SetClOrdID adds the clOrdId to the order cancel params
func (o *OrderCancelParams) SetClOrdID(clOrdID *string) {
	o.ClOrdID = clOrdID
}

// WithOrderID adds the orderID to the order cancel params
func (o *OrderCancelParams) WithOrderID(orderID *string) *OrderCancelParams {
	o.SetOrderID(orderID)
	return o
}

// SetOrderID adds the orderId to the order cancel params
func (o *OrderCancelParams) SetOrderID(orderID *string) {
	o.OrderID = orderID
}

// WithText adds the text to the order cancel params
func (o *OrderCancelParams) WithText(text *string) *OrderCancelParams {
	o.SetText(text)
	return o
}

// SetText adds the text to the order cancel params
func (o *OrderCancelParams) SetText(text *string) {
	o.Text = text
}

// WriteToRequest writes these params to a swagger request
func (o *OrderCancelParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClOrdID != nil {

		// form param clOrdID
		var frClOrdID string
		if o.ClOrdID != nil {
			frClOrdID = *o.ClOrdID
		}
		fClOrdID := frClOrdID
		if fClOrdID != "" {
			if err := r.SetFormParam("clOrdID", fClOrdID); err != nil {
				return err
			}
		}

	}

	if o.OrderID != nil {

		// form param orderID
		var frOrderID string
		if o.OrderID != nil {
			frOrderID = *o.OrderID
		}
		fOrderID := frOrderID
		if fOrderID != "" {
			if err := r.SetFormParam("orderID", fOrderID); err != nil {
				return err
			}
		}

	}

	if o.Text != nil {

		// form param text
		var frText string
		if o.Text != nil {
			frText = *o.Text
		}
		fText := frText
		if fText != "" {
			if err := r.SetFormParam("text", fText); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
