// Code generated by go-swagger; DO NOT EDIT.

package position

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPositionUpdateLeverageParams creates a new PositionUpdateLeverageParams object
// with the default values initialized.
func NewPositionUpdateLeverageParams() *PositionUpdateLeverageParams {
	var ()
	return &PositionUpdateLeverageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPositionUpdateLeverageParamsWithTimeout creates a new PositionUpdateLeverageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPositionUpdateLeverageParamsWithTimeout(timeout time.Duration) *PositionUpdateLeverageParams {
	var ()
	return &PositionUpdateLeverageParams{

		timeout: timeout,
	}
}

// NewPositionUpdateLeverageParamsWithContext creates a new PositionUpdateLeverageParams object
// with the default values initialized, and the ability to set a context for a request
func NewPositionUpdateLeverageParamsWithContext(ctx context.Context) *PositionUpdateLeverageParams {
	var ()
	return &PositionUpdateLeverageParams{

		Context: ctx,
	}
}

// NewPositionUpdateLeverageParamsWithHTTPClient creates a new PositionUpdateLeverageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPositionUpdateLeverageParamsWithHTTPClient(client *http.Client) *PositionUpdateLeverageParams {
	var ()
	return &PositionUpdateLeverageParams{
		HTTPClient: client,
	}
}

/*PositionUpdateLeverageParams contains all the parameters to send to the API endpoint
for the position update leverage operation typically these are written to a http.Request
*/
type PositionUpdateLeverageParams struct {

	/*Leverage
	  Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.

	*/
	Leverage float64
	/*Symbol
	  Symbol of position to adjust.

	*/
	Symbol string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the position update leverage params
func (o *PositionUpdateLeverageParams) WithTimeout(timeout time.Duration) *PositionUpdateLeverageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the position update leverage params
func (o *PositionUpdateLeverageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the position update leverage params
func (o *PositionUpdateLeverageParams) WithContext(ctx context.Context) *PositionUpdateLeverageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the position update leverage params
func (o *PositionUpdateLeverageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the position update leverage params
func (o *PositionUpdateLeverageParams) WithHTTPClient(client *http.Client) *PositionUpdateLeverageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the position update leverage params
func (o *PositionUpdateLeverageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLeverage adds the leverage to the position update leverage params
func (o *PositionUpdateLeverageParams) WithLeverage(leverage float64) *PositionUpdateLeverageParams {
	o.SetLeverage(leverage)
	return o
}

// SetLeverage adds the leverage to the position update leverage params
func (o *PositionUpdateLeverageParams) SetLeverage(leverage float64) {
	o.Leverage = leverage
}

// WithSymbol adds the symbol to the position update leverage params
func (o *PositionUpdateLeverageParams) WithSymbol(symbol string) *PositionUpdateLeverageParams {
	o.SetSymbol(symbol)
	return o
}

// SetSymbol adds the symbol to the position update leverage params
func (o *PositionUpdateLeverageParams) SetSymbol(symbol string) {
	o.Symbol = symbol
}

// WriteToRequest writes these params to a swagger request
func (o *PositionUpdateLeverageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param leverage
	frLeverage := o.Leverage
	fLeverage := swag.FormatFloat64(frLeverage)
	if fLeverage != "" {
		if err := r.SetFormParam("leverage", fLeverage); err != nil {
			return err
		}
	}

	// form param symbol
	frSymbol := o.Symbol
	fSymbol := frSymbol
	if fSymbol != "" {
		if err := r.SetFormParam("symbol", fSymbol); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
