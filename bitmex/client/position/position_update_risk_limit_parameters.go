// Code generated by go-swagger; DO NOT EDIT.

package position

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPositionUpdateRiskLimitParams creates a new PositionUpdateRiskLimitParams object
// with the default values initialized.
func NewPositionUpdateRiskLimitParams() *PositionUpdateRiskLimitParams {
	var ()
	return &PositionUpdateRiskLimitParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPositionUpdateRiskLimitParamsWithTimeout creates a new PositionUpdateRiskLimitParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPositionUpdateRiskLimitParamsWithTimeout(timeout time.Duration) *PositionUpdateRiskLimitParams {
	var ()
	return &PositionUpdateRiskLimitParams{

		timeout: timeout,
	}
}

// NewPositionUpdateRiskLimitParamsWithContext creates a new PositionUpdateRiskLimitParams object
// with the default values initialized, and the ability to set a context for a request
func NewPositionUpdateRiskLimitParamsWithContext(ctx context.Context) *PositionUpdateRiskLimitParams {
	var ()
	return &PositionUpdateRiskLimitParams{

		Context: ctx,
	}
}

// NewPositionUpdateRiskLimitParamsWithHTTPClient creates a new PositionUpdateRiskLimitParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPositionUpdateRiskLimitParamsWithHTTPClient(client *http.Client) *PositionUpdateRiskLimitParams {
	var ()
	return &PositionUpdateRiskLimitParams{
		HTTPClient: client,
	}
}

/*PositionUpdateRiskLimitParams contains all the parameters to send to the API endpoint
for the position update risk limit operation typically these are written to a http.Request
*/
type PositionUpdateRiskLimitParams struct {

	/*RiskLimit
	  New Risk Limit, in Satoshis.

	*/
	RiskLimit int64
	/*Symbol
	  Symbol of position to update risk limit on.

	*/
	Symbol string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the position update risk limit params
func (o *PositionUpdateRiskLimitParams) WithTimeout(timeout time.Duration) *PositionUpdateRiskLimitParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the position update risk limit params
func (o *PositionUpdateRiskLimitParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the position update risk limit params
func (o *PositionUpdateRiskLimitParams) WithContext(ctx context.Context) *PositionUpdateRiskLimitParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the position update risk limit params
func (o *PositionUpdateRiskLimitParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the position update risk limit params
func (o *PositionUpdateRiskLimitParams) WithHTTPClient(client *http.Client) *PositionUpdateRiskLimitParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the position update risk limit params
func (o *PositionUpdateRiskLimitParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRiskLimit adds the riskLimit to the position update risk limit params
func (o *PositionUpdateRiskLimitParams) WithRiskLimit(riskLimit int64) *PositionUpdateRiskLimitParams {
	o.SetRiskLimit(riskLimit)
	return o
}

// SetRiskLimit adds the riskLimit to the position update risk limit params
func (o *PositionUpdateRiskLimitParams) SetRiskLimit(riskLimit int64) {
	o.RiskLimit = riskLimit
}

// WithSymbol adds the symbol to the position update risk limit params
func (o *PositionUpdateRiskLimitParams) WithSymbol(symbol string) *PositionUpdateRiskLimitParams {
	o.SetSymbol(symbol)
	return o
}

// SetSymbol adds the symbol to the position update risk limit params
func (o *PositionUpdateRiskLimitParams) SetSymbol(symbol string) {
	o.Symbol = symbol
}

// WriteToRequest writes these params to a swagger request
func (o *PositionUpdateRiskLimitParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param riskLimit
	frRiskLimit := o.RiskLimit
	fRiskLimit := swag.FormatInt64(frRiskLimit)
	if fRiskLimit != "" {
		if err := r.SetFormParam("riskLimit", fRiskLimit); err != nil {
			return err
		}
	}

	// form param symbol
	frSymbol := o.Symbol
	fSymbol := frSymbol
	if fSymbol != "" {
		if err := r.SetFormParam("symbol", fSymbol); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
