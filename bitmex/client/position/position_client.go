// Code generated by go-swagger; DO NOT EDIT.

package position

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new position API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for position API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PositionGet gets your positions

See <a href="http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html">the FIX Spec</a> for explanations of these fields.
*/
func (a *Client) PositionGet(params *PositionGetParams, authInfo runtime.ClientAuthInfoWriter) (*PositionGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPositionGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Position.get",
		Method:             "GET",
		PathPattern:        "/position",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PositionGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PositionGetOK), nil

}

/*
PositionIsolateMargin enables isolated margin or cross margin per position
*/
func (a *Client) PositionIsolateMargin(params *PositionIsolateMarginParams, authInfo runtime.ClientAuthInfoWriter) (*PositionIsolateMarginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPositionIsolateMarginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Position.isolateMargin",
		Method:             "POST",
		PathPattern:        "/position/isolate",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PositionIsolateMarginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PositionIsolateMarginOK), nil

}

/*
PositionTransferIsolatedMargin transfers equity in or out of a position
*/
func (a *Client) PositionTransferIsolatedMargin(params *PositionTransferIsolatedMarginParams, authInfo runtime.ClientAuthInfoWriter) (*PositionTransferIsolatedMarginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPositionTransferIsolatedMarginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Position.transferIsolatedMargin",
		Method:             "POST",
		PathPattern:        "/position/transferMargin",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PositionTransferIsolatedMarginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PositionTransferIsolatedMarginOK), nil

}

/*
PositionUpdateLeverage chooses leverage for a position
*/
func (a *Client) PositionUpdateLeverage(params *PositionUpdateLeverageParams, authInfo runtime.ClientAuthInfoWriter) (*PositionUpdateLeverageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPositionUpdateLeverageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Position.updateLeverage",
		Method:             "POST",
		PathPattern:        "/position/leverage",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PositionUpdateLeverageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PositionUpdateLeverageOK), nil

}

/*
PositionUpdateRiskLimit updates your risk limit
*/
func (a *Client) PositionUpdateRiskLimit(params *PositionUpdateRiskLimitParams, authInfo runtime.ClientAuthInfoWriter) (*PositionUpdateRiskLimitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPositionUpdateRiskLimitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Position.updateRiskLimit",
		Method:             "POST",
		PathPattern:        "/position/riskLimit",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PositionUpdateRiskLimitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PositionUpdateRiskLimitOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
