// Code generated by go-swagger; DO NOT EDIT.

package position

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPositionGetParams creates a new PositionGetParams object
// with the default values initialized.
func NewPositionGetParams() *PositionGetParams {
	var ()
	return &PositionGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPositionGetParamsWithTimeout creates a new PositionGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPositionGetParamsWithTimeout(timeout time.Duration) *PositionGetParams {
	var ()
	return &PositionGetParams{

		timeout: timeout,
	}
}

// NewPositionGetParamsWithContext creates a new PositionGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewPositionGetParamsWithContext(ctx context.Context) *PositionGetParams {
	var ()
	return &PositionGetParams{

		Context: ctx,
	}
}

// NewPositionGetParamsWithHTTPClient creates a new PositionGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPositionGetParamsWithHTTPClient(client *http.Client) *PositionGetParams {
	var ()
	return &PositionGetParams{
		HTTPClient: client,
	}
}

/*PositionGetParams contains all the parameters to send to the API endpoint
for the position get operation typically these are written to a http.Request
*/
type PositionGetParams struct {

	/*Columns
	  Which columns to fetch. For example, send ["columnName"].

	*/
	Columns *string
	/*Count
	  Number of rows to fetch.

	*/
	Count *int32
	/*Filter
	  Table filter. For example, send {"symbol": "XBTUSD"}.

	*/
	Filter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the position get params
func (o *PositionGetParams) WithTimeout(timeout time.Duration) *PositionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the position get params
func (o *PositionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the position get params
func (o *PositionGetParams) WithContext(ctx context.Context) *PositionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the position get params
func (o *PositionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the position get params
func (o *PositionGetParams) WithHTTPClient(client *http.Client) *PositionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the position get params
func (o *PositionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithColumns adds the columns to the position get params
func (o *PositionGetParams) WithColumns(columns *string) *PositionGetParams {
	o.SetColumns(columns)
	return o
}

// SetColumns adds the columns to the position get params
func (o *PositionGetParams) SetColumns(columns *string) {
	o.Columns = columns
}

// WithCount adds the count to the position get params
func (o *PositionGetParams) WithCount(count *int32) *PositionGetParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the position get params
func (o *PositionGetParams) SetCount(count *int32) {
	o.Count = count
}

// WithFilter adds the filter to the position get params
func (o *PositionGetParams) WithFilter(filter *string) *PositionGetParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the position get params
func (o *PositionGetParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WriteToRequest writes these params to a swagger request
func (o *PositionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Columns != nil {

		// query param columns
		var qrColumns string
		if o.Columns != nil {
			qrColumns = *o.Columns
		}
		qColumns := qrColumns
		if qColumns != "" {
			if err := r.SetQueryParam("columns", qColumns); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount int32
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
